#pragma once
// esto es importante de que venga de un include directory externo asi lo puedo leer con <> sino se rompe todo
// IMPORTANTE: Si no se mete glad arriba del todo se ROMPE es una pelotudez por dios
#include <glad/glad.h>
#include <iostream>
#include "game_types.h"
#include "application.h"
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
// este NO anda
//#include <core/logger/logger.h>
// este SI anda
#include "core/logger/logger.h"


/*
TODO:
	- Renderizar un triangulo al menos
	- Arrancar por el capitulo de luces

	- Ver por que no puedo tomar los header files del proyecto e incluirlos con <>
	- Ver si se puede meter el `glad.c` de alguna forma automatica. Ya que va a ir en todos los ejecutables.

	CMake:
		- Meter glad en thirdparty
		- Consumir glad desde el engine y desde sandbox.
		- Meter la solution `imgui` y `glfw` en un folder que diga `thirdparty`

	OpenGL:
		- Anotar NDC de Vulkan y de Opengl y capaz de WGPU tambien.


SUSPICIOUS THINGS:
	- I removed `glad.c` from the engine. It's only needed on `Sandbox`.
*/


//extern game create_game();
extern bool create_game(game* game_inst);

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);
unsigned int compile_shaders(const char* vertPath, const char* fragPath);

const char* vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"void main()\n"
"{\n"
"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
"}\0";

const char* fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n"
"}\n\0";



#pragma region testing2D

const char* vert2DTesting = "#version 330 core\n"
"out vec4 vertexColor;\n"
"uniform mat4 mvp;\n"
"void main() {\n"
"    float x = float((gl_VertexID & 1) * 2 - 1) * 0.5;\n"
"    float y = float(((gl_VertexID & 2) >> 1) * 2 - 1) * 0.5;\n"
"    gl_Position = mvp * vec4(x, y, 0.0, 1.0);\n"
"    vertexColor = vec4((x + 1.0) * 0.5, (y + 1.0) * 0.5, 0.5, 1.0);\n"
"}\n";

const char* frag2DTesting =
"#version 330 core\n"
"in vec4 vertexColor;\n"
"out vec4 FragColor;\n"
"void main() {\n"
"    FragColor = vertexColor;\n"
"}\n";





const char* vert2DTesting_with_ubo = "#version 330 core\n"
"layout(std140) uniform TransformBlock {\n"
"mat4 transforms[60000];\n"
"};\n"
"out vec4 vertexColor;\n"
"void main() {\n"
"    int quadIndex = gl_VertexID / 4;\n"
"    mat4 transform = transforms[quadIndex];\n"
"    float x = float((gl_VertexID & 1) * 2 - 1) * 0.5;\n"
"    float y = float(((gl_VertexID & 2) >> 1) * 2 - 1) * 0.5;\n"
"    gl_Position = transform * vec4(x, y, 0.0, 1.0);\n"
"    vertexColor = vec4((x + 1.0) * 0.5, (y + 1.0) * 0.5, 0.5, 1.0);\n"
"}\n";

const char* frag2DTesting_with_ubo =
"#version 330 core\n"
"in vec4 vertexColor;\n"
"out vec4 FragColor;\n"
"void main() {\n"
"    FragColor = vertexColor;\n"
"}\n";



// pv matrix in a uniform
// m matrix in a ubo
const char* vert2DTesting_with_ubo_and_pv_matrix_separate_from_v_matrix = "#version 330 core\n"
"layout(std140) uniform TransformBlock {\n"
"mat4 models[60000];\n"
"};\n"
"uniform mat4 pvMatrix;\n"
"out vec4 vertexColor;\n"
"void main() {\n"
"    int quadIndex = gl_VertexID / 4;\n"
"    mat4 model = models[quadIndex];\n"
"    float x = float((gl_VertexID & 1) * 2 - 1) * 0.5;\n"
"    float y = float(((gl_VertexID & 2) >> 1) * 2 - 1) * 0.5;\n"
"    gl_Position = pvMatrix * model * vec4(x, y, 0.0, 1.0);\n"
"    vertexColor = vec4((x + 1.0) * 0.5, (y + 1.0) * 0.5, 0.5, 1.0);\n"
"}\n";

const char* frag2DTesting_with_ubo_and_pv_matrix_separate_from_v_matrix =
"#version 330 core\n"
"in vec4 vertexColor;\n"
"out vec4 FragColor;\n"
"void main() {\n"
"    FragColor = vertexColor;\n"
"}\n";

#pragma endregion testing2D

void createTransformsUBO(const std::vector<glm::mat4>& transforms, unsigned int ubo) {
	glBindBuffer(GL_UNIFORM_BUFFER, ubo);
	glm::mat4* ptr = (glm::mat4*)glMapBufferRange(GL_UNIFORM_BUFFER, 0, sizeof(glm::mat4) * 10000, GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
	if (ptr) {

		for (size_t i = 0; i < 10000; i++) {
			ptr[i] = transforms[i];
		}
		glUnmapBuffer(GL_UNIFORM_BUFFER);
	}
}



struct TestingRenderer {
	const char* vert_shader_source;
	const char* frag_shader_source;
	unsigned int shader_id;

	TestingRenderer(const char* vert_shader_source, const char* frag_shader_source) : vert_shader_source(vert_shader_source), frag_shader_source(frag_shader_source) {
		compile_shaders();
	}


	void render();

	void compile_shaders() {
		// build and compile our shader program
		// ------------------------------------
		// vertex shader
		unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
		glShaderSource(vertexShader, 1, &vert_shader_source, NULL);
		glCompileShader(vertexShader);
		// check for shader compile errors
		int success;
		char infoLog[512];
		glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
		if (!success)
		{
			glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
			std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
		}
		// fragment shader
		unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
		glShaderSource(fragmentShader, 1, &frag_shader_source, NULL);
		glCompileShader(fragmentShader);
		// check for shader compile errors
		glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
		if (!success)
		{
			glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
			FATAL("SHADER::FRAGMENT::COMPILATION_FAILED: ");
			FATAL("%s", infoLog);
			abort();
		}
		// link shaders
		shader_id = glCreateProgram();
		glAttachShader(shader_id, vertexShader);
		glAttachShader(shader_id, fragmentShader);
		glLinkProgram(shader_id);
		// check for linking errors
		glGetProgramiv(shader_id, GL_LINK_STATUS, &success);
		if (!success) {
			glGetProgramInfoLog(shader_id, 512, NULL, infoLog);
			std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
			abort();
		}
		glDeleteShader(vertexShader);
		glDeleteShader(fragmentShader);
	}

};

int main() {
	game game_inst;
	create_game(&game_inst);

	game_inst.init(&game_inst);


	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	GLFWwindow* window = glfwCreateWindow(game_inst.app_config.width, game_inst.app_config.height, game_inst.app_config.name, NULL, NULL);
	INFO("GLFW window created successfully!");
	if (window == NULL)
	{
		FATAL("Failed to create GLFW window");
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		FATAL("Failed to initialize GLAD");
		return -1;
	}
	INFO("OpenGL initialized successfully!");



#pragma region renderer
	unsigned int shaderProgram = compile_shaders(vertexShaderSource, fragmentShaderSource);
	unsigned int testing2dprogram = compile_shaders(vert2DTesting, frag2DTesting);
	unsigned int testing2dprogram_with_ubos = compile_shaders(vert2DTesting_with_ubo, frag2DTesting_with_ubo);


	TestingRenderer renderer_pvmatrix_as_uniform_and_model_as_ubo(
		vert2DTesting_with_ubo_and_pv_matrix_separate_from_v_matrix,
		frag2DTesting_with_ubo_and_pv_matrix_separate_from_v_matrix
	);

	float quad_vertices[] = {
		-1.0f, 1.0f, 0.0f,
		 -1.0f, -1.0f, 0.0f,
		 1.0f,  1.0f, 0.0f,

		-1.0f, -1.0f, 0.0f,
		 1.0f, -1.0f, 0.0f,
		 1.0f,  1.0f, 0.0f
	};
	float vertices1[] = {
		-1.0f, 1.0f, 0.0f,
		 -1.0f, -1.0f, 0.0f,
		 1.0f,  1.0f, 0.0f
	};

	float vertices[] = {
		-0.5f, -0.5f, 0.0f,
		 0.5f, -0.5f, 0.0f,
		 0.0f,  0.5f, 0.0f
	};

	unsigned int VBO, VAO, EBO, quad_vao, quad_vbo;
	glGenVertexArrays(1, &VAO);
	glGenVertexArrays(1, &quad_vao);
	glGenBuffers(1, &VBO);
	glGenBuffers(1, &EBO);
	glGenBuffers(1, &quad_vbo);
	// bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
	glBindVertexArray(VAO);

	//glBindBuffer(GL_ARRAY_BUFFER, VBO);
	//glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);


	////glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	////glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

	//glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	//glEnableVertexAttribArray(0);

	//// note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
	//glBindBuffer(GL_ARRAY_BUFFER, 0); 
	//glBindVertexArray(0);



	//glBindVertexArray(quad_vao);
	//glBindBuffer(GL_ARRAY_BUFFER, quad_vbo);
	//glBufferData(GL_ARRAY_BUFFER, sizeof(quad_vertices), quad_vertices, GL_STATIC_DRAW);

	//// index, number of components (position has 3 components), bytes between each generic attribute: every attribute is 3 floats so 3 * sizeof(float)
	//glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	//glEnableVertexAttribArray(0);

	//glBindBuffer(GL_ARRAY_BUFFER, 0); 
	//glBindVertexArray(0);

	// remember: do NOT unbind the EBO while a VAO is active as the bound element buffer object IS stored in the VAO; keep the EBO bound.
	//glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

	// You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
	// VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
	//glBindVertexArray(0); 

	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);


	GLuint javao;
	glGenVertexArrays(1, &javao);
	glBindVertexArray(javao);

	float aspect_ratio = game_inst.app_config.width / game_inst.app_config.height;
	float width = game_inst.app_config.width;
	float height = game_inst.app_config.height;
	// Set up the MVP matrix
	glm::mat4 model = glm::translate(glm::mat4(1.0f), glm::vec3(width / 2.0f, height / 2.0f, 0.0f)); // Translate it to the middle of the screen!
	model = glm::scale(model, glm::vec3(10.0f, 100.0f, 0.0));
	glm::mat4 view = glm::mat4(1.0f); // Identity matrix for view
	glm::mat4 proj = glm::ortho(0.0f, width, height, 0.0f, -1.0f, 1.0f); // Orthographic projection

	glm::mat4 base_vp = proj * view;
	//glUseProgram(testing2dprogram); // comente esta para probar los ubos
   //glUseProgram(testing2dprogram_with_ubos);

	glUseProgram(renderer_pvmatrix_as_uniform_and_model_as_ubo.shader_id);
	//glUseProgram(testing2dprogram_with_ubos_pv_and_m_matrix_separated);


	// Define variables for FPS calculation
	double lastTime = glfwGetTime();
	int frameCount = 0;

	GLuint ubo;
	glGenBuffers(1, &ubo);
	glBindBuffer(GL_UNIFORM_BUFFER, ubo);
	glBufferData(GL_UNIFORM_BUFFER, sizeof(glm::mat4) * 60000, NULL, GL_DYNAMIC_DRAW); // Pre-allocate memory
	glBindBuffer(GL_UNIFORM_BUFFER, 0);

	//	GLuint blockIndex = glGetUniformBlockIndex(testing2dprogram_with_ubos, "TransformBlock");
	//	glUniformBlockBinding(testing2dprogram_with_ubos, blockIndex, 0);
	//	glBindBufferBase(GL_UNIFORM_BUFFER, 0, ubo);

	GLuint blockIndex = glGetUniformBlockIndex(renderer_pvmatrix_as_uniform_and_model_as_ubo.shader_id, "TransformBlock");
	glUniformBlockBinding(renderer_pvmatrix_as_uniform_and_model_as_ubo.shader_id, blockIndex, 0);
	glBindBufferBase(GL_UNIFORM_BUFFER, 0, ubo);
	GLuint pvMatrixLocation = glGetUniformLocation(renderer_pvmatrix_as_uniform_and_model_as_ubo.shader_id, "pvMatrix");
	glUniformMatrix4fv(pvMatrixLocation, 1, GL_FALSE, glm::value_ptr(base_vp));

	GLint maxUniformBlockSize;
	glGetIntegerv(GL_MAX_UNIFORM_BLOCK_SIZE, &maxUniformBlockSize);
	std::cout << "Maximum size of a uniform block: " << maxUniformBlockSize << " bytes\n";

	float x = 0.0;
	float y = 0.0;
	float inc = 0.0001;
	while (!glfwWindowShouldClose(window))
	{
		processInput(window);
		view = glm::mat4(1.0f); // Identity matrix for view
		proj = glm::ortho(0.0f, width, height, 0.0f, -1.0f, 1.0f); // Orthographic projection

		base_vp = proj * view;

		//glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		/*
		2D testing...
		*/

		// 45 fps con 10.000 es exactamente igual que comfy a la hora de dibujar un rect.
		// 5 fps con esto...
		// 100.000 drawcalls  y 100.000 uploadeadas a la GPU de uniforms
		// comento esto para probar los ubo
		//for (int i = 0; i < 60000; i++) {
		//	float x  = rand() % int(width);
		//	float y =  rand() % int(height);
		//	glm::mat4 mvp = base_vp * glm::scale(glm::translate(glm::mat4(1.0f), glm::vec3(x, y, 0.0)), glm::vec3(30.0f, 30.0f, 0.0));
		//	glUniformMatrix4fv(glGetUniformLocation(testing2dprogram, "model"), 1, GL_FALSE, glm::value_ptr(mvp));
		//	
		//	glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
		//}

		// tengo que hacer lo mismo qque arriba, pero usando un UBO grande con todas los calculos y mandar un `glDrawArrays(GL_TRIANGLE_STRIP, 0, 100000)`

		/*
		- I'm storing the model matrix inside an UBO in the vertex shader.
		- I'm calculating the projection * view matrix at the start of the frame and sending it as a uniform to the vertex shader.
		- Inside the render loop I iterate over all the items and calculate its model matrix.
		- I upload this data to the UBO using a map/unmap method.
		- I do `glDrawArrays(GL_TRIANGLE_STRIP, 0, 4 * transforms_size);`

		This is by far the best approach under this circunstances.
		*/
		std::vector<glm::mat4> transforms;
		int transforms_size = 10000;
		for (int i = 0; i < transforms_size; i++) {
			float x = rand() % int(width);
			float y = rand() % int(height);
			//glm::mat4 mvp = base_vp * glm::scale(glm::translate(glm::mat4(1.0f), glm::vec3(x, y, 0.0)), glm::vec3(30.0f, 30.0f, 0.0));
			glm::mat4 mvp = glm::scale(glm::translate(glm::mat4(1.0f), glm::vec3(x, y, 0.0)), glm::vec3(30.0f, 30.0f, 0.0));
			//x += inc;
			//y += inc;

			transforms.push_back(mvp);
		}

		createTransformsUBO(transforms, ubo);
		transforms.clear();

		glDrawArrays(GL_TRIANGLE_STRIP, 0, 4 * transforms_size);


		//glUseProgram(shaderProgram);
		//glBindVertexArray(VAO);
		//glDrawArrays(GL_TRIANGLES, 0, 3);
		//glBindVertexArray(0);

		/*
		glBindVertexArray(quad_vao);
		glDrawArrays(GL_TRIANGLES, 0, 6);
		glBindVertexArray(0);
		*/

		glfwSwapBuffers(window);
		glfwPollEvents();
		// FPS calculation logic
		double currentTime = glfwGetTime();
		frameCount++;
		if (currentTime - lastTime >= 1.0) { // If last print was more than 1 sec ago
			std::cout << "FPS: " << frameCount << std::endl;

			frameCount = 0;
			lastTime += 1.0;
		}
	}
	glfwTerminate();

	//HelloTriangleApplication app;

	//app.run(&game_inst);
#pragma endregion renderer


}


void processInput(GLFWwindow* window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	DEBUG("Window resized!");
	// Note: width and height will be significantly larger than specified on retina displays.
	glViewport(0, 0, width, height);
}

unsigned int compile_shaders(const char* vertexShaderSource, const char* fragmentShaderSource) {
	// build and compile our shader program
	// ------------------------------------
	// vertex shader
	unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
	glCompileShader(vertexShader);
	// check for shader compile errors
	int success;
	char infoLog[512];
	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
	if (!success)
	{
		glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
	}
	// fragment shader
	unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
	glCompileShader(fragmentShader);
	// check for shader compile errors
	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
	if (!success)
	{
		glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
		FATAL("SHADER::FRAGMENT::COMPILATION_FAILED: ");
		FATAL("%s", infoLog);
		abort();
	}
	// link shaders
	unsigned int shaderProgram = glCreateProgram();
	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragmentShader);
	glLinkProgram(shaderProgram);
	// check for linking errors
	glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
	if (!success) {
		glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
		abort();
	}
	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);
	return shaderProgram;
}

